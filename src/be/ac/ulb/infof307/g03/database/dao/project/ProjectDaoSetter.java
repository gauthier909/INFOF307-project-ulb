package be.ac.ulb.infof307.g03.database.dao.project;

import be.ac.ulb.infof307.g03.database.Database;
import be.ac.ulb.infof307.g03.database.dao.TagDao;
import be.ac.ulb.infof307.g03.database.dao.TaskDao;
import be.ac.ulb.infof307.g03.exceptions.DaoException;
import be.ac.ulb.infof307.g03.helper.Helper;
import be.ac.ulb.infof307.g03.models.*;

import java.sql.*;
import java.time.LocalDate;
import java.util.List;

import static java.sql.Statement.RETURN_GENERATED_KEYS;

/**
 * Data access class of the table project (only writing/updating access)
 */
public class ProjectDaoSetter {
    /**
     * Insert a project
     * @param project project to insert
     * @return the id of the inserted project
     */
    public static int insert(Project project) throws DaoException {
        int idOfInsertedProject=-1;
        boolean isParent = false;
        if(project.getParent() == null){
            isParent = true;
        }
        try{
            ResultSet rs = insertInProjectTable(project);
            if(rs.next()){
                idOfInsertedProject = rs.getInt(1);
                TagDao.insertTags(project.getTags(), idOfInsertedProject);
                TaskDao.insertTasks(project.getTasks(), idOfInsertedProject);
                Helper.getCurrentUser().linkToProject(idOfInsertedProject, isParent);
                if(!isParent){
                    for(User user : project.getParent().getAllCollaborators()){
                        if(user.getId() != Helper.getCurrentUser().getId()){
                            user.linkToProject(idOfInsertedProject, false);
                        }
                    }
                }
                Database.commitStatement();
                if(project.getChildren()!=null){
                    for (Project p: project.getChildren()) {
                        p.getParent().setId(idOfInsertedProject);
                        insertAfterImport(p);
                    }
                }
            }

        }
        catch (SQLException e){
            Database.rollbackStatement();
            throw new DaoException("Error : Failed to insert a project", e);
        }
        return idOfInsertedProject;
    }

    /**
     * insert a project after import and check if the tags name already exist.
     * @param project The project to insert after it has been import
     * @throws DaoException DaoException
     */
    public static void insertAfterImport(Project project) throws DaoException {
        for(Tag tag : project.getTags()){
            int id = TagDao.getIdIfNameExist(tag.getName());
            tag.setId(id);
        }
        insert(project);
    }

    /**
     * Manage the insertion in project SQL table when inserting a project
     * @param project The project object
     * @return the result set generated by getGeneratedKeys
     * @throws SQLException Insertion failed
     */
    private static ResultSet insertInProjectTable(Project project) throws SQLException, DaoException {
        String sqlInsert = "INSERT INTO project(name,description,startDate,dateEnd,parentProject, password) VALUES(?,?,?,?,?, ?)";
        PreparedStatement ps=Database.getPreparedStatement(sqlInsert, RETURN_GENERATED_KEYS);
        ps.setString(1,project.getName());
        ps.setString(2,project.getDescription());
        ps.setDate(3, Date.valueOf(LocalDate.now()));
        ps.setDate(4,java.sql.Date.valueOf(project.getDateEnd()));
        if(project.getParent() != null){
            ps.setInt(5,project.getParent().getId());
        }
        ps.setString(6, project.getPassword());
        ps.executeUpdate();
        return ps.getGeneratedKeys();
    }

    /**
     * Delete a project in the DB.
     * @param id project's id
     * @return true if deleted
     */
    public static boolean delete(int id) throws DaoException{
        try{
            Project project = ProjectDaoGetter.getById(id);
            if(project == null) return false;
            PreparedStatement ps = Database.getPreparedStatement("DELETE FROM project WHERE id = ?");
            ps.setInt(1, id);
            ps.executeUpdate();
            Database.commitStatement();
        }catch(SQLException e){
            Database.rollbackStatement();
            throw new DaoException("Error : Cannot delete project in database", e);
        }
        return true;
    }

    /**
     * Update a project in a DB
     * @param project the project to update
     */
    public static void update(Project project) throws DaoException{
        String sql = "UPDATE project SET name = ? ,description = ? ,dateEnd = ?, isGeetActivate = ?, currentBranch = ?, password = ?, parentProject = ? WHERE id = ?;";
        try {
            PreparedStatement ps = Database.getPreparedStatement(sql);
            ps.setString(1, project.getName());
            ps.setString(2, project.getDescription());
            ps.setDate(3, Date.valueOf(project.getDateEnd()));
            ps.setBoolean(4, project.getGeetActivate());
            if(project.getGeetActivate())
                ps.setInt(5,project.getCurrentBranch().getId());
            else
                ps.setNull(5,Types.INTEGER);

            if(project.getPassword() != null){
                ps.setString(6,project.getPassword());
            }
            else{
                ps.setNull(6, Types.NULL);
            }
            if (project.getParent() != null) {
                ps.setInt(7, project.getParent().getId());
            }else {
                ps.setNull(7, Types.INTEGER);
            }
            ps.setInt(8,project.getId());
            ps.executeUpdate();
            Database.commitStatement();

        } catch (SQLException e) {
            Database.rollbackStatement();
            throw new DaoException("Error : Cannot update project", e);
        }
    }

    /**
     * Function that overrides the project in database with the same name :
     *      update the old project and replace the children.
     * @param  oldProject the project to override
     * @param project the project that will override
     * @throws DaoException DaoException
     */
    public static void overrideProjectFromName(Project oldProject, Project project) throws DaoException {
        project.setId(oldProject.getId());
        update(project);

        List<Project> oldChildrenList = oldProject.getChildren();
        if(oldChildrenList != null) {
            for (Project p : oldChildrenList) {
                delete(p.getId());
            }
        }

        List<Tag> oldTagList = oldProject.getTags();
        if(oldTagList != null) {
            for (Tag t : oldTagList) {
                TagDao.deleteFromProject(t.getId(), oldProject.getId());
            }
        }

        List<Task> oldTaskList = oldProject.getTasks();
        if(oldTaskList != null) {
            for (Task t : oldTaskList) {
                TaskDao.deleteAllAssignmentByTaskId(t.getId());
                TaskDao.delete(t.getId());
            }
        }

        List<Project> childrenList = project.getChildren();
        if(childrenList != null) {
            for (Project p : childrenList) {
                insert(p);
            }
        }
        List<Tag> tagList = project.getTags();
        if(tagList != null) {
            for (Tag t : tagList) {
                TagDao.insertToProject(t.getId(), project.getId());
            }
        }

        List<Task> taskList = project.getTasks();
        if(taskList != null) {
            for (Task t : taskList) {
                TaskDao.insert(t);
            }
        }
    }
}
